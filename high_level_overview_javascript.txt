###### Overview of Javascript ############

1. Javascript is a high level, prototype-based, object-oriented, multi-paradigm, interpreted or just-in-time
compiled, dynamic, single-threaded, garbage-collected programming language with first class functions
and a non-blocking event loop concurrency model.

Terminology:

1. High level:
	Such programming languages don't make developers manage system resources as those operations are
	abstracted away.

2. Garbage-collected:
	Javascript has algorithms inside the javascript engine which removes old, unused objects
	from memory in order to not clog it up with unnecessary stuff.

3. Interpreted or Just-in-time compiled:
	Javascript is compiled from human-readable language to machine code. It happens inside the
	javascript engine.

4. Multi-paradigm:
	An approach of structuring code, which will direct your coding style and technique

	a. Procedural programming
	b. Object-oriented programming
	c. Functional programming

	Or it can be divided into 2 types:

	a. Imperative
	b. Declarative

5. Prototype-based object-oriented:
	Every created object inherits methods from its prototype using prototypal inheritance.

6. First-class functions:
	It means functions can be treated as variables. We can pass them into other functions
	and return them from functions.

7. Dynamically-typed:
	It means there are no datatype definitions. Types become known at runtime and the datatype
	of variable is automatically changed.

	To know more about statically typed vs dynamically typed, check here:
	https://www.bairesdev.com/blog/static-vs-dynamic-typing/

8. Single-threaded non-blocking event loop


########### The Javascript Engine and Runtime ##########

Javascript Engine:

1. It is a program that executes javascript code. Every browser has its own javascript engine and
the most well-known one is Google Chrome's V8 Engine used in Node.js also.

2. A javascript engine has 2 components the callstack and the heap.

3. The callstack is where the code is executed using the execution contexts.

4. Heap is the unstructured memory pool which stores all the objects that our application
   needs.

5. As a computer's processor understands only 0s and 1s the javascript code is first converted to 
   binary code using compilation or interpretation

6. Compilation:
	Entire code is converted into machine code at once, and written to a binary file that can
	be executed by a computer.

7. Interpretation:
	Interpreter runs through the source code and executes it line by line

8. Just-In-Time compilation:
	Entire code is converted into machine code at once, then executed immediately. The step in
	which machine code is written to a binary file is skipped and binary code is executed
	immediately.

9. Javascript is a just-in-time compiled language.

10. Steps in which javascript is executed:
	a. Parsing
	b. Compilation
	c. Execution
	d. Optimization

	d, b, c steps keep running in loops till the code is executed entirely.

11. Web APIs are accessible using the global window object.

12. Parts of the Javascript Runtime:
	a. JS Engine - Heap, Callstack
	b. Web APIs - DOM, fetch API, timers
	c. Callback queue - click events, timer callbacks, data callbacks

13. The functions in callback queue are executed when the callstack becomes empty

14. Node.js runtime contains the same parts as a Javascript runtime but it does not
	have the web APIs instead it has C++ bindings & threadpool.


########## Execution contexts and the call stack #########

What is an execution context ? (or how the call stack works ?)

1. After the compilation of code is done, a global execution context is created for the
	top level code and top level code is basically all the code that is not inside the
	function.

2. Top level code is basically expressions and function declarations but the code inside
	the function is executed when called.

3. Execution context is an environment where a piece of javascript is executed. It stores
	all the information for some code to be executed.

4. In any javascript project only 1 global execution context (default context) is created.

5. After creation of global execution context, execution of top level code inside it happens.

6. After the top level code is executed, functions start to execute. For every function to be
	executed a execution context is created for that function and for methods in js objects.
	All these execution contexts together make up the call stack.

7. When functions are done executing, the JS engine waits for callback functions to arrive so
	that it can execute these.

What's inside the execution context ?

1. Variable Environment:
	The first thing inside the execution context is the variable environment. It stores all
	the variables and function declarations are stored and there is a special arguments object.
	This object contains all the arguments that were passed to the function.

2. A function can access variables outside the function using the scope chain.

3. Each context also gets a this keyword.

4. Above 3 parts are generated during the creation phase right before execution.

5. Execution contexts of arrow functions don't get this keyword and arguments object. Instead
	they can use the arguments object and the this keyword from their closest regular function
	parent.

How will the JS engine keep track of the order in which functions were called ? And how will it
know where it currently is in the execution ?

1. Call Stack:
	It is the place where execution contexts get stacked on top of each other to keep track
	of where we are in the execution.


######### Scope and scope chain ############

1. Execution context:
	The execution context contains 3 parts variable environment, scope chain and this keyword.

2. Scoping: How our variables are organized and accessed. "Where do variables live ?" or "Where can we 
	access our variables and where not ?".

3. Lexical scoping: It means that the way variables are organized and accessed are controlled by
	placement of functions and of blocks in the programs code.
	Eg. A function that is inside another function has access to the variables of the parent function.

4. Scope: Space or environment in which a certain variable is declared (variable environment in case
	of functions). There is global scope, function scope and block scope.

5. Scope and variable environment is same in the case of functions.

6. Scope of a variable: Region of our code where a certain variable can be accessed.

7. The 3 different types of scope:
	a. Global scope
	b. Function scope
	c. Block scope (ES6)

Scope is the place where the variables are declared. Functions also are stored in variables.

Global scope:
This for top level code or for all variables and functions declared outside of any  block
or function. These variables are accessible everywhere in our program, in all functions and 
all blocks.

Function scope:
Each and every function creates a scope and the variables inside are accessible inside that function.
It is called local scope. Outside the function the variables are not accessible. It is technically
same as the variable environment. Reference error is thrown if tried to access variable inside function.

Block scope:
1. Previously in ES5 only function and global scopes were present but starting from ES6 module we have
block scope. Blocks also create scopes and with blocks we mean everything between curly braces such
as a block of if statement or for loop. Variables inside that block are accessible in that block only
and not outside the block.

2. The big difference between function and block scope. Block scopes only apply to variables declared
with "let" and "const". "let" and "const" are block scoped whereas "var" is scoped to the function or the global
scope.

3. Functions are also block scoped (only in strict mode). Otherwise they are block scoped.

4. Scope chain:

const myName = "Jonas";

function first() {
	const age = 30;

	if (age >= 30) {
		const decade = 3; 
		var millinial = true;
	}

	function second() {
		const job = "teacher";

		console.log(`${myName} is a ${age}-old ${job}`);
		// Jonas is a 30-old teacher
	}

	second();
}

first();

let and const are block scoped but var is function scoped. Inner scopes can access variables from the
outer scopes.

5. Scope chain vs call stack:

=> Call stack is the order in which functions were called. It has nothing to do with order in which functions
	are called.
	Scope is the order in which functions are written.

=> Scope chain is equal to adding together all the variable environments of all the parent scopes.
	Scope chain is built behind the scenes by the JS engine.

=> Variable lookup:
	When a variable is not in the current scope, the engine looks up in the scope chain until it finds
	the variable its looking for. This is called variable lookup.

=> Lexical scoping:
	It determines the access to variables and functions written within a program.

=> Scope chain is nothing to do with the order of the function calls.


########## Variable Environment, Hoisting and the temporal dead zone (TDZ) ###########

1. Lets take a closer look at the variable environment.

2. Hoisting:
	It makes some types of variables accessible/usable in the code before they
	are actually declared. "Variables are lifted to the top of their scope". Before execution,
	code is scanned for variable declarations and for each variable a new property is created
	in the variable environment object.

3. Hoisting works differently for different variable types:

	a. Function declarations:
			These are hoisted with initial value as the function and it is block scoped (in strict mode only).
			In practice, we can use function declarations before they are actually declared in the code.

	b. var variables:
			These are hoisted with initial value as undefined and they are function scoped. var variables
			give undefined before the declaration without throwing any errors.

	c. let and const variables:
			let and const variables are not hoisted as they are in the temporal dead zone (TDZ). TDZ is the region
			between the start of the scope and the place where the variables are declared. let and const are block
			scoped.

d. Function expressions and arrow functions:
	Hoisting for these depends on using var, let or const for storing the expressions. We cannot use them
	before we write them in the code unlike function declarations.

3. Temporal Dead Zone:
	=> This exists so that it is easier to avoid and catch errors. Accessing variables before declaration
	is bad practice and should be avoided.

	=> Makes const variables work as they should. They shouldn't be re-assigned and should be initialized
		when they are declared.

4. Why Hoisting ?
	=> Makes code more readable.
	=> Helps in using functions before actual declaration.

######## this keyword ##########

1. "this" keyword is a special variable that is created for every execution context (every function).
	It takes the value of (points to) the "owner" of the function in which the this keyword is used.

2. "this" keyword is NOT static. It depends on how the function is called, and its value is only assigned
	when the function is actually called.

3. Different ways a function is called:
	
	a. Object method call => this keyword points to the object that is calling the method.
	b. Simple function call => this = undefined (only in strict mode) otherwise points to window object
										in browser.
	c. Arrow functions => this points to the this value of outer execution context.
	d. Event listener => this keyword points to the DOM element the handler is attached to.

4. this keyword does not point to the function itself and also not its variable environment















































